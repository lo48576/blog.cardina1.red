---
created_at: 2017-04-02T16:43:54+0900
published_at: 2017-04-02T16:43:54+0900
format: article2019
title: "ソースコード直接実行のテクニック"
tags:
  - programming
  - prog-c
  - prog-cplusplus
  - prog-rust
  - shell-script
kind: article

excerpt: "コンパイルの必要なソースコードを(インタプリタ言語のスクリプトのように)直接実行するテクニック"
---
<?xml version="1.0"?>
<article
	xmlns="https://www.cardina1.red/_ns/doc2019"
	xmlns:xl="http://www.w3.org/1999/xlink"
	xml:id="article-2017-04-02-direct-source-execution"
	xml:lang="ja"
	version="0.1"
>
<title>ソースコード直接実行のテクニック</title>
<p>
	この記事では、ターミナルからコマンド一発で (<code>sh code.cpp</code> のように)ソースコードやファイルをコンパイルし、更には実行・表示できるようにするためのテクニックを紹介する。
</p>

<section xml:id="abstract">
	<title>概要</title>
	<p>
		コンパイルの必要なファイルを書いたものの、いちいちコンパイルや確認にコマンドを叩いたりオプションを何度も指定するのは面倒ということは偶にある
		<footnote xml:id="footnote-i-dont-wanna-use-shell-history" refmark-id="ref-footnote-i-dont-wanna-use-shell-history">
			シェル履歴を使えというのは全くもってその通りなのだが、私は補完を快適にするため zsh で <code>setopt hist_ignore_space</code> を使って、シェルには最低限の本当に有用な履歴しか残さないようにしている。
			よって、ちょろっと書いたコードをコンパイルするためのコマンドを履歴に残すのは嫌なのである。
			また、その場でエイリアスを定義するのもアリだが、シェルを落とすと消えてしまうのでこれは少し弱すぎる。
		</footnote>
		。
		普通の人は素直に Make 等を使ったり、それ用のラッパー等を使ったり、エディタで提供されている機能やプラグインやシェル履歴でどうにかするものなのであろうが。
		ものぐさな私は、ソースコードをターミナルから直接コンパイルし実行する方法を考えていた。
	</p>
	<p>
		そして、以下の言語について良い方法を思い付いた。
	</p>
	<ul>
		<li><link linkend="code-examples-c">C</link></li>
		<li><link linkend="code-examples-cpp">C++</link></li>
		<li><link linkend="examples--rust">Rust</link></li>
		<li><link linkend="examples--graphviz">Graphviz</link></li>
	</ul>
	<p>
		本当は TeX 等にもこの方法を適用したかったのだが、残念ながらうまい手が思い付かなかった。
		TeX 等の他のフォーマットについて良い方法をご存知であれば是非 <link xl:href="https://twitter.com/lo48576/">Twitter</link> とかで教えていただきたい。
	</p>
</section>

<section xml:id="advantage">
	<title>利点</title>
	<p>
		紹介の手法では、以下のような利点がある。
	</p>
	<ul>
		<li>C ライクなコメント文法を持つ多くの言語に適用可能</li>
		<li>非プログラミング言語にも適用可能</li>
		<li>シェルスクリプトをそのまま埋め込み実行できる<ul>
				<li>コンパイラへコマンドラインオプション等も指定可能</li>
				<li>コンパイラ以外の呼び出しも可能</li>
		</ul></li>
		<li>直接実行時に引数を与えてそれを受け取ることも可能</li>
	</ul>

	<p>
		コンパイラへコマンドラインオプションを渡せるというのは、特に C や C++ において規格のバージョンを指定したりしたい場合において、非常に有用である。
	</p>
</section>

<section xml:id="examples">
	<title>実例</title>

	<section xml:id="examples--c-and-cpp">
		<title>C 言語、 C++</title>
		<figure xml:id="code-examples-c">
			<figure>
				<programlisting language="c"><![CDATA[#if 0
gcc --std=c11 "$0" -o c-po && ./c-po
exit
#endif

#include <stdio.h>

int main(void) {
    puts("po");
    return 0;
}]]></programlisting>
				<caption>C のソースコード (バージョン 1) <filename>po.c</filename></caption>
			</figure>
			<figure>
				<programlisting language="c"><![CDATA[///bin/true<<//
/*
//
gcc --std=c11 "$0" -o c-po && ./c-po
exit
*/

#include <stdio.h>

int main(void) {
    puts("po");
    return 0;
}]]></programlisting>
				<caption>C のソースコード (バージョン 2) <filename>po.c</filename></caption>
			</figure>
			<figure>
				<screen role="terminal"><prompt>$ </prompt><userinput>ls</userinput>
po.c
<prompt>$ </prompt><userinput>sh po.c</userinput>
po
<prompt>$ </prompt><userinput>ls</userinput>
c-po  po.c
<prompt>$</prompt></screen>
				<caption>C の実行例</caption>
			</figure>
			<caption>C</caption>
		</figure>
		<p>
			これら2つのバージョンには、以下のような違いがあるため、場合によって使いわけるのが良い。
		</p>
		<p>
			バージョン1では <code>#</code> をコード中で使うと、プリプロセッサがそれを解釈してしまい文法エラーになる。
			単なるコメントには <code>: "hello"</code> のように null コマンドを使ってやれば良いが、 <code>#</code> という文字そのものが必要な場合は、 <code>$(printf '\x23')</code> や <code>echo -e '\x23'</code> のようにするなどの工夫が必要だろう。
		</p>
		<p>
			バージョン2では、 <code>*/</code> という文字列はコメント終端と見做されてしまうためそのまま使えない。
			<code>*''/</code> のように、間に空文字列を挟む等の工夫が必要になる。
		</p>
		<p>
			C++ でも、やることは C と全く同じだ。
		</p>

		<figure xml:id="code-examples-cpp">
			<figure>
				<programlisting language="c++"><![CDATA[#if 0
g++ --std=c++14 "$0" -o cpp-po && ./cpp-po
exit
#endif

#include <iostream>

int main(void) {
    std::cout << "po" << std::endl;
    return 0;
}]]></programlisting>
				<caption>C++ のソースコード (バージョン 1) <filename>po.cpp</filename></caption>
			</figure>
			<figure>
				<screen role="terminal"><prompt>$ </prompt><userinput>ls</userinput>
po.cpp
<prompt>$ </prompt><userinput>sh po.cpp</userinput>
po
<prompt>$ </prompt><userinput>ls</userinput>
cpp-po  po.cpp
<prompt>$</prompt></screen>
				<caption>C++ の実行例</caption>
			</figure>
			<caption>C++</caption>
		</figure>
		<tip>
			<title>C も C++ もコメントとプリプロセッサの仕様はだいたい同じ(はず)</title>
			<p>
				C の2通りの書き方は、どちらも C++ で同様に使える。
			</p>
		</tip>
	</section>

	<section xml:id="examples--rust">
		<title>Rust</title>
		<figure xml:id="code-examples-rust">
			<figure>
				<programlisting language="rust"><![CDATA[///bin/true<<//
/*
//
rustc "$0" -o rust-po && ./rust-po
exit
*/
fn main() {
    println!("po");
}]]></programlisting>
				<caption>Rust のソースコード <filename>po.rs</filename></caption>
			</figure>
			<figure>
				<screen role="terminal"><prompt>$ </prompt><userinput>ls</userinput>
po.rs
<prompt>$ </prompt><userinput>sh po.rs</userinput>
po
<prompt>$ </prompt><userinput>ls</userinput>
po.rs  rust-po
<prompt>$</prompt></screen>
				<caption>Rust の実行例</caption>
			</figure>
			<caption>Rust</caption>
		</figure>

		<p>
			Rust は、コメントの構文が C と同じため、プリプロセッサを使わない方法がそのまま使える。
			Rust における <code>///</code> は doc comment になってしまうが、どうせ単体ソースで気軽に実行する用途では気にならないだろう。
			どうしても駄目だというのであれば、 <code>////bin/true</code> のように適宜スラッシュを増やしてどうにかすれば良いだろう。
		</p>
	</section>

	<section xml:id="examples--graphviz">
		<title>Graphviz</title>
		<figure xml:id="code-examples-graphviz">
			<figure>
				<programlisting><![CDATA[///bin/true <<//
/*
//
dot -Tpng "$0" -o dot-po.png
exit
*/

digraph G {
    rankdir = LR;
    P -> O [label="po"];
}]]></programlisting>
				<caption>Graphviz の dot ファイル <filename>po.dot</filename></caption>
			</figure>
			<figure>
				<screen role="terminal"><prompt>$ </prompt><userinput>ls</userinput>
po.dot
<prompt>$ </prompt><userinput>sh po.dot</userinput>
<prompt>$ </prompt><userinput>ls</userinput>
dot-po.png  po.dot
<prompt>$</prompt></screen>
				<caption>Graphviz の実行例</caption>
			</figure>
			<caption>Graphviz</caption>
		</figure>
	</section>
</section>

<section xml:id="tips">
	<title>Tips</title>
	<section xml:id="tips--rich-ops">
		<title>複雑な処理</title>
		<p>
			シェルスクリプトの如く任意のコマンド(ただし親のソースのコメント解除や文法エラーを引き起こす文字を除く)を置けるので、たとえば以下のようなことができる。
		</p>
		<ul>
			<li>
				実行・コンパイル前に <code>cppcheck</code> など lint ツールを適用する
			</li>
			<li>
				二度コンパイルして静的ライブラリと動的ライブラリ両方を生成する
			</li>
			<li>
				実行後、テンポラリファイルや実行バイナリを削除する
			</li>
			<li>
				実行に成功したら <code>git commit</code> する
			</li>
		</ul>
		<p>
			たとえば、 graphviz の dot ファイルをコンパイルしつつ、 <code>dot</code> コマンドが存在しない場合にはメッセージを表示し、また <code>optipng</code> が存在していれば PNG ファイルを最適化するようなコードは、以下のようになる。
		</p>
		<figure xml:id="code-tips-graphviz-rich">
			<figure>
				<programlisting><![CDATA[///bin/true <<//
/*
//
OUT_STEM="dot-po"
OUT_PNG="${OUT_STEM}.png"
if type dot >/dev/null ; then
    if dot -Tpng "$0" -o "${OUT_PNG}" ; then
        echo 'successfully built.'
        type optipng >/dev/null && optipng "${OUT_PNG}"
    else
        echo 'compile failed.' >&2
    fi
else
    echo '`dot` command not found. Graphviz is required.' >&2
fi
exit
*/

digraph G {
    rankdir = LR;
    P -> O [label="po"];
}]]></programlisting>
				<caption>Graphviz の dot ファイル <filename>po.dot</filename></caption>
			</figure>
			<figure>
				<screen role="terminal"><prompt>$ </prompt><userinput>ls</userinput>
po.dot
<prompt>$ </prompt><userinput>sh po.dot</userinput>
successfully built.
** Processing: dot-po.png
221x59 pixels, 4x8 bits/pixel, RGB+alpha
Reducing image to 8 bits/pixel, 253 colors (1 transparent) in palette
Input IDAT size = 5199 bytes
Input file size = 5274 bytes

Trying:
  zc = 9  zm = 8  zs = 0  f = 0         IDAT size = 1948

Selecting parameters:
  zc = 9  zm = 8  zs = 0  f = 0         IDAT size = 1948

Output IDAT size = 1948 bytes (3251 bytes decrease)
Output file size = 2802 bytes (2472 bytes = 46.87% decrease)

<prompt>$ </prompt><userinput>ls</userinput>
dot-po.png  po.dot
<prompt>$</prompt></screen>
				<caption>Graphviz の実行例 (<code>dot</code> コマンドと <code>optipng</code> コマンドが存在する場合)</caption>
			</figure>
			<caption>Graphviz</caption>
		</figure>
	</section>

	<section xml:id="tips--cli-options">
		<title>コマンドラインオプション</title>
		<p>
			実行時に渡した引数を、埋め込んだスクリプトから参照できる。
		</p>

		<figure>
			<figure>
				<programlisting language="c"><![CDATA[///bin/true<<//
/*
//
: 'Default output file is `./c-po`'.
OUT="${1:-"./c-po"}"
gcc --std=c11 "$0" -o "${OUT}" && "./${OUT}"
exit
*/

#include <stdio.h>

int main(void) {
    puts("po");
    return 0;
}]]></programlisting>
				<caption>出力ファイルパスを指定可能にした C ソース <filename>po.c</filename></caption>
			</figure>
			<figure>
				<screen role="terminal"><prompt>$ </prompt><userinput>ls</userinput>
po.c
<prompt>$ </prompt><userinput>sh po.c hoge</userinput>
po
<prompt>$ </prompt><userinput>ls</userinput>
hoge  po.c
<prompt>$ </prompt><userinput>sh po.c</userinput>
po
<prompt>$ </prompt><userinput>ls</userinput>
c-po  hoge  po.c
<prompt>$</prompt></screen>
				<caption>実行例</caption>
			</figure>
			<caption>出力ファイルパスを指定可能にした例</caption>
		</figure>

		<figure>
			<figure>
				<programlisting language="c"><![CDATA[///bin/true<<//
/*
//
MSG="${1:-"This is a default message."}"
gcc --std=c11 "$0" -DMSG="\"${MSG}\"" -o msg \
    && ./msg
exit
*/

#ifndef MSG
#   define MSG "This is a default message."
#endif
#include <stdio.h>

int main(void) {
    printf("%s\n", MSG);
    return 0;
}]]></programlisting>
				<caption>マクロを指定可能にした C ソース <filename>msg.c</filename></caption>
			</figure>
			<figure>
				<screen role="terminal"><prompt>$ </prompt><userinput>sh msg.c</userinput>
This is a default message.
<prompt>$ </prompt><userinput>sh msg.c "Hello, world"</userinput>
Hello, world
<prompt>$ </prompt><userinput>sh msg.c 'こんちわ\nせかい'</userinput>
こんちわ
せかい
<prompt>$</prompt></screen>
				<caption>実行例</caption>
			</figure>
			<caption>マクロを指定可能にした例</caption>
		</figure>
	</section>
</section>

<section xml:id="description">
	<title>解説</title>
	<section xml:id="description--abstract">
		<title>概要</title>
		<p>
			C のバージョン1は単にプリプロセッサの記号とシェルスクリプトのコメント記号が同じであることを利用するだけなので言うまでもない。
		</p>
		<p>
			C のバージョン2や他の各言語での方法は、図解すると以下のようになる。
		</p>
		<literallayout class="monospaced"><![CDATA[
        SHELL                                                     Source lang
shell block comment start -> ,---- ///bin/true<<//       <- Source line comment
  (ignored by shell)         |     /*              ----. <- Source block comment start
shell block comment end   -> `---- //                  |
shell commands            ->       command             |
shell commands            ->       command             |
shell exit                ->       exit                |
  (ignored by shell)               */              ----' <- Source block comment end
]]></literallayout>
		<p>
			シェルコメント開始→ソースコメント開始→シェルコメント終了の時点で、それ以下の行はシェルのみが解釈することになる。
			そこにはソースのコメント終端以外は自由に書けるので、コンパイルするなり最適化するなりしてしまう。
			シェルでやることが全て済めば、 <code>exit</code> してしまえばそれ以下はシェルが解釈しなくなるので、ソースのコメントを閉じればおしまいである。
		</p>
		<p>
			この方法は、上で例示した C 、 C++ 、 Rust 、 Graphviz (dot) のみに限らず、 <strong><code>//</code>(或いは <code>/</code>)を行コメントとして解釈し、他にブロックコメント構文を持つような全ての言語に適用可能である</strong>、非常に汎用的な方法だ。
		</p>
		<tip>
			<title>コメント記号</title>
			<p>
				実は、 <code>:</code> が行コメントの開始記号である場合にも、上述のテクニックは応用可能である。
			</p>
			<programlisting><![CDATA[: <<:
/*
:
command1
command2
exit
*/]]></programlisting>
			<p>
				また、ブロックコメントの記号には制約はないため、 <code>/*</code> <code>*/</code> でない言語でも問題ない。
			</p>
		</tip>
	</section>

	<section xml:id="description--details">
		<title>細部</title>
		<section xml:id="first-line">
			<title>1行目: <code>///bin/true&lt;&lt;//</code></title>
			<p>
				<code>/bin/true</code> は、戻り値 <code>0</code> を返すだけの単純かつ軽量なコマンド
				<footnote xml:id="footnote-true-man" refmark-id="ref-footnote-true-man">
					<link xl:href="https://linux.die.net/man/1/true"><code>true</code> の man page</link>の説明「true - do nothing, successfully」は何とも哲学めいていて面白い。
					ちなみに反対バージョンの <link xl:href="https://linux.die.net/man/1/false"><code>false</code> コマンド</link>では「false - do nothing, unsuccessfully」だ。
				</footnote>
				であり、標準入力を無視し、何も出力せず終了する。
				この「標準入力の無視」が重要で、ここにソースコードの中でシェルが無視すべき部分(ブロックコメント開始)が流れ込めば良いわけである。
			</p>
			<p>
				この流し込みを、ヒアドキュメントで行う。
				コマンドラインにて <code>&lt;&lt;FOOBAR</code> のようにすると、最初の <code>FOOBAR</code> という行までの内容が改行含めそのままテキストとして標準入力へ流されるというのが、ヒアドキュメントの機能である。
				ヒアドキュメント終了の記号もまた、ソースコードの言語では無視されてほしいため、行コメントの記号(ここでは <code>//</code>)をそのまま使う。
				ヒアドキュメントを無視させることでブロックコメント代わりに使う手法は、シェルスクリプトに限らず割と一般的である
				<footnote xml:id="footnote-heredoc-comment" refmark-id="ref-footnote-heredoc-comment">
					Python のブロックコメントに <code>"""</code> などを使うのも同じようなものだろう。
				</footnote>
				。
			</p>
			<p>
				<code>/bin/true</code> を、スラッシュ2つでなく3つにして <code>///bin/true</code> のように指定するのにも、理由がある。
			</p>
			<figure>
				<blockquote cite="https://tiswww.case.edu/php/chet/bash/FAQ">
					<p>
						E10) Why does <code>cd //</code> leave <code>$PWD</code> as <code>//</code>?
					</p>
					<p>
						POSIX.2, in its description of <code>cd</code>, says that <strong>three</strong> or more leading
						slashes may be replaced with a single slash when canonicalizing the
						current working directory.
					</p>
					<p>
						This is, I presume, for historical compatibility. Certain versions of
						Unix, and early network file systems, used paths of the form
						<code>//hostname/path</code> to access 'path' on server 'hostname'.
					</p>
				</blockquote>
				<caption><link xl:href="https://tiswww.case.edu/php/chet/bash/FAQ">Bash FAQ, version 4.14, for Bash version 4.4</link>, 2017-04-02</caption>
			</figure>
			<p>
				<link xl:href="https://stackoverflow.com/questions/16840916/what-is-path-how-is-it-different-from">linux - what is path //, how is it different from / - Stack Overflow</link> で紹介されているこの説明がすべてである。
				<quote><strong>three</strong> or more leading slashes may be replaced with a single slash</quote> とのことなので、まあ2つ並べるよりは3つ以上並べた方が安心だろうという、それだけのことだ。
			</p>
			<p>
				とはいえ、これは昔の bash (今どうなのかは知らない)のカレントディレクトリの扱いについての記述であり、シェルスクリプト一般についてそのまま適用できるかは知らない。
				そもそも互換性のためだろうとも書いてあるため、現代においてスラッシュは幾つあろうが関係ないのかもしれない。
			</p>
		</section>

		<section xml:id="description--comment-start-end">
			<title>2行目、3行目: ブロックコメント開始とヒアドキュメント終了</title>
			<p>
				上で解説した図や流れのとおりである。
				シェルがヒアドキュメントとして解釈をやめている隙に元言語でのブロックコメントを開始し、次の行でヒアドキュメントを閉じる。
				この閉じは、元言語ではコメントとして無視される。
			</p>
		</section>

		<section xml:id="description--shell-commands">
			<title>4行目以降: シェルスクリプト</title>
			<p>
				4行目から <code>exit</code> までは、シェル (<code>sh</code>) が解釈するため、そのままシェルスクリプトである。
				コマンドをいくら呼ぼうが、制御構造を使おうが、ネットワーク通信をしようが、好き放題できる。
				そして用が済んだら <code>exit</code> で退出だ。
			</p>
			<p>
				シェルスクリプトにスクリプト以外の大きなデータを持たせる手法として、ファイルの途中で <code>exec</code> や <code>exit</code> を必ず呼ぶことで、それ以降のデータをシェルに無視させ、その場所に自由なデータを置くというのは、割と一般的なものである。
				たとえばインストーラや自己展開アーカイブが、データ(往々にしてバイナリ)を自身の末尾に持っておくことで、単一ファイルでスクリプトとデータの2つの独立した情報を持っていたりする。
				テキストであっても、 grub の設定ファイル <link xl:href="https://git.savannah.gnu.org/cgit/grub.git/tree/util/grub.d/40_custom.in?h=2.00"><code class="filepath">/etc/grub.d/40_custom</code></link> 等がこのテクニックを使っている。
			</p>
			<p>
				ヒアドキュメントでも大きなデータを埋め込むことはできるが、その場合埋め込むデータにヒアドキュメントの終端記号だけを持つ行が含まれないことを保証する必要がある。
				一方でシェルスクリプトを途中で終了する場合は、データに制限はない。
			</p>
		</section>

		<section xml:id="description--after-shell-exit">
			<title><code>exit</code> 以降</title>
			<p>
				あとは、元言語からシェルスクリプトを無視するために開始していたブロックコメントを閉じるだけだ。
				コメントを閉じれば、あとはシェルの絡まない純粋なソースコードの領域である。
			</p>
		</section>
	</section>
</section>

</article>
